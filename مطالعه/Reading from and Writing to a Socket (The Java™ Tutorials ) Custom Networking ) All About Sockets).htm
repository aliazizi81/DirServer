<!--?xml version="1.0" encoding="utf-8"?-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US"><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
        <title>Reading from and Writing to a Socket (The Java™ Tutorials &gt;        
            Custom Networking &gt; All About Sockets)
</title>

     <meta name="description" content="This networking Java tutorial describes networking capabilities of the Java platform, working with URLs, sockets, datagrams, and cookies">
     <meta name="keywords" content="java programming, learn java, java sample code, java networking, java url, java socket, datagram, java cookie">
        
<style type="text/css">
    .FigureCaption   { 
        margin-left: 1in; 
        margin-right: 1in; 
        font-family: sans-serif; 
        font-size: smaller; 
        text-align: justify;
    }
    #TopBar_bl {
        background: url(../../images/java_bar_bl.gif) 0 100% no-repeat;
        width: 100%;
        height: 60px;
    }
    #TopBar_br {
        background: url(../../images/java_bar_br.gif) 100% 100% no-repeat;
        width: 100%;
        height: 60px;
    }
    #TopBar_tl {
        background: url(../../images/java_bar_tl.gif) 0 0 no-repeat;
        width: 100%;
        height: 60px;
    }
    #TopBar_tr {
        background: url(../../images/java_bar_tr.gif) 100% 0 no-repeat;
        width: 100%;
        height: 60px;
    }
    #TopBar {
        background: #35556B url(../../images/java_bar.gif);
        margin: 10px 10px 0 10px;
        height:60px;
        min-width:700px;
        color: white;
        font-family: sans-serif; 
        font-weight: bold;
    }
    @media print {
        #BreadCrumbs, #Download {
            display: none;
        }
    }
    #TopBar_right {
        line-height: 14px;
        float: right;
        padding-top: 2px;
        padding-right: 30px;
        text-align: left;
    }
    @media print {
        #TopBar_right {
            display: none;
        }
    }
    #TopBar_right a {
        font-size: 12px;
        margin: 3px;
        padding: 0;
    }
    #TopBar a:visited, #TopBar a:link {
        color: white;
        text-decoration: none;
    }
    #TopBar a:hover, #TopBar a:active  {
        background-color: white;
        color: #35556B;
    }
    #BreadCrumbs {
        padding: 4px 5px 0.5em 0;
        font-family: sans-serif; 
        float: right;
    }
    #BreadCrumbs a {
        color: blue;
    }
    #BreadCrumbs a:visited, #BreadCrumbs a:link {
        text-decoration: none;
    }
    #BreadCrumbs a:hover, #BreadCrumbs a:active {
        text-decoration: underline;
    }
    #PageTitle {
        margin: 0 5px 0.5em 0;
        color: #F90000;
    }    
    #PageContent{
        margin: 0 5px 0 20px;
    }
    .LeftBar_shown {
        width: 13em;
        float: left;
        margin-left: 10px;
        margin-top: 4px;
        margin-bottom: 2em;
        margin-right: 10px;
    }
    @media print {
        .LeftBar_shown {
            display: none;
        }
    }
    .LeftBar_hidden {
        display: none;
    }
    #Footer {
        padding-top: 10px;
        padding-left: 10px;
        margin-right: 10px;
    }
    
    .footertext {
        font-size: 10px;
        font-family: sans-serif; 
        margin-top: 1px;
    }
    
    #Footer2 {
        padding-top: 10px;
        padding-left: 10px;
        margin-right: 10px;
    }
    .NavBit  {
        padding: 4px 5px 0.5em 0;
        font-family: sans-serif; 
    }
    @media print {
        .NavBit {
            display: none;
        }
    }
    #TagNotes {
        text-align: right;        
    }
    
    @media print {
        #TagNotes a:visited, #TagNotes a:link {
            color: #35556B;
            text-decoration: none;
        }
    }
    #Contents a, .NavBit a, #TagNotes a {
        color: blue
    }
    #TagNotes a:visited, #TagNotes a:link,
    #Contents a:visited, #Contents a:link,
    .NavBit a:visited, .NavBit a:link {
        text-decoration: none;
    }
    #TagNotes a:hover, #TagNotes a:active,   
    #Contents a:hover, #Contents a:active,   
    .NavBit a:hover, .NavBit a:active {  
        text-decoration: underline;
    }
    #Contents {
        float: left;
        font-family: sans-serif; 
    }
    @media print {
        #Contents {
            display: none;
        }
    }
    @media screen {
        div.PrintHeaders {
            display: none;
        }
    }
    .linkLESSON, .nolinkLESSON {
        margin-left: 0.5em;
        text-indent: -0.5em
    }
    .linkAHEAD, .nolinkAHEAD, .linkQUESTIONS, .nolinkQUESTIONS   {
        margin-left: 1.5em; 
        text-indent: -0.5em
    }
    .linkBHEAD, .nolinkBHEAD   {
        margin-left: 2.5em;
        text-indent: -0.5em
    }
    .linkCHEAD, .nolinkCHEAD   {
        margin-left: 3.5em;
        text-indent: -0.5em
    }
    .nolinkLESSON, .nolinkAHEAD, .nolinkBHEAD, .nolinkCHEAD,
    .nolinkQUESTIONS {
        font-weight: bold;
        color: #F90000;
    }
    .MainFlow_indented {
        margin-right: 10px;
        margin-left: 15em;
        margin-bottom: 2em;

    }
    .MainFlow_wide {
        margin-right: 10px;
        margin-left: 10px;
        margin-bottom: 2em;

    }
    @media print {
        .MainFlow_indented, .MainFlow_wide {
            padding-top: 0;
            margin-top: 10px;
            margin-right: 10px;
            margin-left: 0;
        }
    }
    h1, h2, h3, h4, h5 {
        color: #F90000;
        font-family: sans-serif;
    }

    h1 {
        font-weight: bold;
        font-size: 20px;
    }

    h2 {
        font-weight: bold;
        font-size: 17px;
    }

    h3 {
        font-weight: bold;
        font-size: 14px;
    }

    h4 {
        font-size: 15px;
    }

    h5 {
        font-size: 12px;
    }


    #ToggleLeft {
        display: none;
    }
    
    .note {
        margin: 0 30px 0px 30px;
    }
    
    .codeblock {
        margin: 0 30px 0px 30px;
    }
    
    .tocli {
        list-style-type:none;
    }

    .betadraft {
        color: red;
    }
</style>
<script type="text/javascript">
/* <![CDATA[ */
    function leftBar() {
        var nameq = 'tutorial_showLeftBar='
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookieString = cookies[i];
            while (cookieString.charAt(0) == ' ') {
                cookieString = cookieString.substring(1, cookieString.length);
            }
            if (cookieString.indexOf(nameq) == 0) {
                cookieValue =  cookieString.substring(nameq.length,
                        cookieString.length);
                return cookieValue == 'yes';
            }
        }
        return true;
    }

    function showLeft(b) {
        var contents = document.getElementById("LeftBar");
        var main = document.getElementById("MainFlow");
        var toggle = document.getElementById("ToggleLeft");
        if (b) {
            contents.className = "LeftBar_shown";
            main.className = "MainFlow_indented";
            toggle.innerHTML = "Hide TOC";
            document.cookie = 'tutorial_showLeftBar=yes; path=/';
        } else {
            contents.className = "LeftBar_hidden";
            main.className = "MainFlow_wide";
            toggle.innerHTML = "Show the TOC";
            document.cookie = 'tutorial_showLeftBar=no; path=/';
        }
    }

    function toggleLeft() {
        showLeft(document.getElementById("LeftBar").className ==
                "LeftBar_hidden");
        document.getElementById("ToggleLeft").blur();
    }

    function load() {
        showLeft(leftBar());
        document.getElementById("ToggleLeft").style.display="inline";
    }

    function showCode(displayCodePage, codePath) {
        var codePathEls = codePath.split("/");
        var currDocPathEls = location.href.split("/");
        //alert ("codePathEls = " + codePathEls + "\n" + "currDocPathEls = " + currDocPathEls);
        currDocPathEls.pop(); // remove file name at the end
        while (codePathEls.length > 0) {
            if (codePathEls[0] == "..") {
                codePathEls.shift();
                currDocPathEls.pop();
            } else {
                break;
            }
        }
        var fullCodePath = currDocPathEls.join("/") + "/" + codePathEls.join("/");
        //alert ("fullCodePath = " + fullCodePath );
        if (codePath.indexOf(".java") != -1 || codePath.indexOf(".jnlp") != -1) {
            window.location.href = displayCodePage + "?code=" + encodeURI(fullCodePath);
        } else {
            window.location.href = fullCodePath;
        }
    }
/* ]]> */    
</script>


    </head>
<body onload="load()">
    <noscript>
        A browser with JavaScript enabled is required for this page to operate properly.
    </noscript>

    <div id="TopBar"> <div id="TopBar_tr"> <div id="TopBar_tl"> <div id="TopBar_br"> <div id="TopBar_bl"> 
                        <div id="TopBar_right"> 
                            <a target="_blank" href="http://www.oracle.com/technetwork/java/javase/downloads/java-se-7-tutorial-2012-02-28-1536013.html">Download Ebooks</a><br>
                            <a target="_blank" href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Download JDK</a>
                            <br>
                            <a href="http://docs.oracle.com/javase/tutorial/search.html" target="_blank">Search Java Tutorials</a>
                            <br>
                            <a style="display: inline;" href="javascript:toggleLeft()" id="ToggleLeft">Hide TOC</a>
                        </div>
                    </div> </div> </div> </div> </div>
    <div class="PrintHeaders">
        <b>Trail:</b> Custom Networking
        <br><b>Lesson:</b> All About Sockets
    </div>

    <div id="LeftBar" class="LeftBar_shown">
        <div id="Contents">
            <div class="linkLESSON"><a href="http://docs.oracle.com/javase/tutorial/networking/sockets/index.html">All About Sockets</a></div>
<div class="linkAHEAD"><a href="http://docs.oracle.com/javase/tutorial/networking/sockets/definition.html">What Is a Socket?</a></div>
<div class="nolinkAHEAD">Reading from and Writing to a Socket</div>
<div class="linkAHEAD"><a href="http://docs.oracle.com/javase/tutorial/networking/sockets/clientServer.html">Writing the Server Side of a Socket</a></div>
</div>
    </div>
    <div id="MainFlow" class="MainFlow_indented">
            <span id="BreadCrumbs">
                <a href="http://docs.oracle.com/javase/tutorial/index.html" target="_top">Home Page</a>
                &gt;
                <a href="http://docs.oracle.com/javase/tutorial/networking/index.html" target="_top">Custom Networking</a>
                &gt;
                <a href="http://docs.oracle.com/javase/tutorial/networking/sockets/index.html" target="_top">All About Sockets</a>
            </span>
            <div class="NavBit">
                <a target="_top" href="http://docs.oracle.com/javase/tutorial/networking/sockets/definition.html">«&nbsp;Previous</a>&nbsp;•&nbsp;<a target="_top" href="http://docs.oracle.com/javase/tutorial/networking/TOC.html">Trail</a>&nbsp;•&nbsp;<a target="_top" href="http://docs.oracle.com/javase/tutorial/networking/sockets/clientServer.html">Next&nbsp;»</a>
            </div>
            <div id="PageTitle"><h1>Reading from and Writing to a Socket</h1></div>
            <div id="PageContent">

<p>Let's look at a simple example that illustrates how a program can establish a connection to a server program using the <code>Socket</code> class and then, how the client can send data to and receive data from the server through the socket.</p>

<p>The example program implements a client,
<a class="SourceLink" target="_blank" href="http://docs.oracle.com/javase/tutorial/networking/sockets/examples/EchoClient.java" onclick="showCode('../../displayCode.html', 'examples/EchoClient.java'); return false;"><code>EchoClient</code></a>, that connects to an echo server. The echo server receives data from its client and echoes it back. The example
<a class="SourceLink" target="_blank" href="http://docs.oracle.com/javase/tutorial/networking/sockets/examples/EchoServer.java" onclick="showCode('../../displayCode.html', 'examples/EchoServer.java'); return false;"><code>EchoServer</code></a> implements an echo server. (Alternatively, the client can connect to any host that supports the <a href="http://tools.ietf.org/html/rfc862">Echo Protocol</a>.)</p>

<p>The <code>EchoClient</code> example creates a socket, thereby getting
 a connection to the echo server. It reads input from the user on the 
standard input stream, and then forwards that text to the echo server by
 writing the text to the socket. The server echoes the input back 
through the socket to the client. The client program reads and displays 
the data passed back to it from the server.</p>

<p>Note that the <code>EchoClient</code> example both writes to and reads from its socket, thereby sending data to and receiving data from the echo server.</p>
<p>Let's walk through the program and investigate the interesting parts. The following statements in the 
<a class="TutorialLink" target="_top" href="http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html"><code>try</code>-with-resources</a> statement in the <code>EchoClient</code> example are critical. These lines establish the socket connection between the client and the server and open a
<a class="APILink" target="_blank" href="http://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html"><code>PrintWriter</code></a> and a
<a class="APILink" target="_blank" href="http://docs.oracle.com/javase/8/docs/api/java/io/BufferedReader.html"><code>BufferedReader</code></a> on the socket:</p>
 
<div class="codeblock"><pre>String hostName = args[0];
int portNumber = Integer.parseInt(args[1]);

try (
    Socket echoSocket = new Socket(hostName, portNumber);
    PrintWriter out =
        new PrintWriter(echoSocket.getOutputStream(), true);
    BufferedReader in =
        new BufferedReader(
            new InputStreamReader(echoSocket.getInputStream()));
    BufferedReader stdIn =
        new BufferedReader(
            new InputStreamReader(System.in))
)
</pre></div>

<p>The first statement in the <code>try</code>-with resources statement creates a new
<a class="APILink" target="_blank" href="http://docs.oracle.com/javase/8/docs/api/java/net/Socket.html"><code>Socket</code></a> object and names it <code>echoSocket</code>. The <code>Socket</code>
 constructor used here requires the name of the computer and the port 
number to which you want to connect. The example program uses the first
<a class="TutorialLink" target="_top" href="http://docs.oracle.com/javase/tutorial/essential/environment/cmdLineArgs.html">command-line argument</a>
 as the name of the computer (the host name) and the second command line
 argument as the port number. When you run this program on your 
computer, make sure that the host name you use is the fully qualified IP
 name of the computer to which you want to connect. For example, if your
 echo server is running on the computer <code>echoserver.example.com</code> and it is listening on port number 7, first run the following command from the computer <code>echoserver.example.com</code> if you want to use the <code>EchoServer</code> example as your echo server:</p>

<div class="codeblock"><pre>java EchoServer 7
</pre></div>

<p>Afterward, run the <code>EchoClient</code> example with the following command:</p>

<div class="codeblock"><pre>java EchoClient echoserver.example.com 7
</pre></div>
 
<p>The second statement in the <code>try</code>-with resources statement gets the socket's output stream and opens a <code>PrintWriter</code> on it. Similarly, the third statement gets the socket's input stream and opens a <code>BufferedReader</code> on it. The example uses readers and writers so that it can write Unicode characters over the socket.</p>

<p>To send data through the socket to the server, the <code>EchoClient</code> example needs to write to the <code>PrintWriter</code>. To get the server's response, <code>EchoClient</code> reads from the <code>BufferedReader</code> object <code>stdIn</code>, which is created in the fourth statement in the <code>try</code>-with resources statement. If you are not yet familiar with the Java platform's I/O classes, you may wish to read 
<a class="TutorialLink" target="_top" href="http://docs.oracle.com/javase/tutorial/essential/io/index.html">Basic I/O</a>.</p>

<p>The next interesting part of the program is the <code>while</code> 
loop. The loop reads a line at a time from the standard input stream and
 immediately sends it to the server by writing it to the <code>PrintWriter</code> connected to the socket:</p>

<div class="codeblock"><pre>String userInput;
while ((userInput = stdIn.readLine()) != null) {
    out.println(userInput);
    System.out.println("echo: " + in.readLine());
}
</pre></div>

<p>The last statement in the <code>while</code> loop reads a line of information from the <code>BufferedReader</code> connected to the socket. The <code>readLine</code> method waits until the server echoes the information back to <code>EchoClient</code>. When <code>readline</code> returns, <code>EchoClient</code> prints the information to the standard output.</p>

<p>The <code>while</code> loop continues until the user types an end-of-input character. That is, the <code>EchoClient</code>
 example reads input from the user, sends it to the Echo server, gets a 
response from the server, and displays it, until it reaches the 
end-of-input. (You can type an end-of-input character by pressing <strong>Ctrl-C</strong>.) The <code>while</code>
 loop then terminates, and the Java runtime automatically closes the 
readers and writers connected to the socket and to the standard input 
stream, and it closes the socket connection to the server. The Java 
runtime closes these resources automatically because they were created 
in the <code>try</code>-with-resources statement. The Java runtime 
closes these resources in reverse order that they were created. (This is
 good because streams connected to a socket should be closed before the 
socket itself is closed.)</p>

<p>This client program is straightforward and simple because the echo 
server implements a simple protocol. The client sends text to the 
server, and the server echoes it back. When your client programs are 
talking to a more complicated server such as an HTTP server, your client
 program will also be more complicated. However, the basics are much the
 same as they are in this program:</p>
<ol>
<li>Open a socket.</li>
<li>Open an input stream and output stream to the socket.</li>
<li>Read from and write to the stream according to the server's protocol.</li>
<li>Close the streams.</li>
<li>Close the socket.</li>
</ol>
<p>Only step 3 differs from client to client, depending on the server. The other steps remain largely the same.</p>


        </div>
        <div class="NavBit">
            <a target="_top" href="http://docs.oracle.com/javase/tutorial/networking/sockets/definition.html">« Previous</a>
            •
            <a target="_top" href="http://docs.oracle.com/javase/tutorial/networking/TOC.html">Trail</a>
            •
            <a target="_top" href="http://docs.oracle.com/javase/tutorial/networking/sockets/clientServer.html">Next »</a>
        </div>
    </div>
    <div id="Footer2">
<hr>
<div id="TagNotes">
    <p class="footertext">Problems with the examples? Try <a target="_blank" href="http://docs.oracle.com/javase/tutorial/information/run-examples.html">Compiling and Running
        the Examples: FAQs</a>.
    <br>
    Complaints? Compliments? Suggestions? <a target="_blank" href="http://docs.oracle.com/javase/feedback.html">Give
    us your feedback</a>.
    </p>
</div> 

<div id="Footer">
<p class="footertext"><a name="license_info">Your use of this</a> page and all the material on pages under "The Java Tutorials" banner 
 is subject to these <a href="http://docs.oracle.com/javase/tutorial/information/cpyr.html">legal notices</a>.
</p>
<table summary="" border="0" cellpadding="5" cellspacing="0">
    <tbody><tr>
         <td width="20%">
	 <table border="0" cellpadding="5" cellspacing="0" width="100%">
            <tbody><tr>
              <td headers="h1" align="center"><img id="duke" src="Reading%20from%20and%20Writing%20to%20a%20Socket%20%28The%20Java%E2%84%A2%20Tutorials%20%29%20Custom%20Networking%20%29%20All%20About%20Sockets%29_files/DukeWave.gif" alt="duke image" height="55" width="55"></td>
              <td headers="h2" align="left" valign="middle"><img id="oracle" src="Reading%20from%20and%20Writing%20to%20a%20Socket%20%28The%20Java%E2%84%A2%20Tutorials%20%29%20Custom%20Networking%20%29%20All%20About%20Sockets%29_files/logo_oracle_footer.gif" alt="Oracle logo" height="29" width="100"></td>
           </tr>
          </tbody></table>
          </td>

          <td align="center" valign="middle" width="55%">
		<p class="footertext"><a href="http://www.oracle.com/us/corporate/index.html">About Oracle</a> | <a href="http://www.oracle.com/technology/index.html">Oracle Technology Network</a> | <a href="http://www.oracle.com/us/legal/terms/index.html">Terms of Use</a></p> 
	 </td>
          <td align="right" valign="middle" width="25%">
      		<p class="footertext">Copyright © 1995, 2014 Oracle and/or its affiliates. All rights reserved.</p>
	 </td>
     </tr>     
</tbody></table>
</div>
    </div>
    <div class="PrintHeaders">
        <b>Previous page:</b> What Is a Socket?
        <br><b>Next page:</b> Writing the Server Side of a Socket
    </div>
<!-- Start SiteCatalyst code   -->
<script type="text/javascript" language="JavaScript" src="Reading%20from%20and%20Writing%20to%20a%20Socket%20%28The%20Java%E2%84%A2%20Tutorials%20%29%20Custom%20Networking%20%29%20All%20About%20Sockets%29_files/s_code_download.htm"></script>
<script type="text/javascript" language="JavaScript" src="Reading%20from%20and%20Writing%20to%20a%20Socket%20%28The%20Java%E2%84%A2%20Tutorials%20%29%20Custom%20Networking%20%29%20All%20About%20Sockets%29_files/s_code.htm"></script>
<noscript>
A browser with JavaScript enabled is required for this page to operate properly.
</noscript>

<!-- ********** DO NOT ALTER ANYTHING BELOW THIS LINE ! *********** -->
<!--  Below code will send the info to Omniture server -->
<script type="text/javascript" language="javascript">var s_code=s.t();if(s_code)document.write(s_code)</script>

<!-- End SiteCatalyst code -->

 
</body></html>